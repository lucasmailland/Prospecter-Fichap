import { ProspectsService } from './prospects.service';
import { Lead } from '@prisma/client';
export declare class ProspectsController {
    private readonly prospectsService;
    constructor(prospectsService: ProspectsService);
    findAll(): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        fullName: string | null;
        phone: string | null;
        company: string | null;
        jobTitle: string | null;
        website: string | null;
        linkedinUrl: string | null;
        companySize: string | null;
        industry: string | null;
        location: string | null;
        country: string | null;
        city: string | null;
        state: string | null;
        timezone: string | null;
        language: string | null;
        isEmailValid: boolean;
        emailValidationScore: number | null;
        emailValidationDetails: string | null;
        score: number;
        priority: number;
        scoringFactors: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        source: import(".prisma/client").$Enums.LeadSource;
        hubspotId: string | null;
        notes: string | null;
        metadata: string | null;
        enrichedAt: Date | null;
        validatedAt: Date | null;
        lastContactedAt: Date | null;
        userId: string;
    }[]>;
    findById(id: string): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        fullName: string | null;
        phone: string | null;
        company: string | null;
        jobTitle: string | null;
        website: string | null;
        linkedinUrl: string | null;
        companySize: string | null;
        industry: string | null;
        location: string | null;
        country: string | null;
        city: string | null;
        state: string | null;
        timezone: string | null;
        language: string | null;
        isEmailValid: boolean;
        emailValidationScore: number | null;
        emailValidationDetails: string | null;
        score: number;
        priority: number;
        scoringFactors: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        source: import(".prisma/client").$Enums.LeadSource;
        hubspotId: string | null;
        notes: string | null;
        metadata: string | null;
        enrichedAt: Date | null;
        validatedAt: Date | null;
        lastContactedAt: Date | null;
        userId: string;
    }>;
    create(leadData: {
        email: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        jobTitle?: string;
        phone?: string;
        source?: string;
        userId: string;
    }): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        fullName: string | null;
        phone: string | null;
        company: string | null;
        jobTitle: string | null;
        website: string | null;
        linkedinUrl: string | null;
        companySize: string | null;
        industry: string | null;
        location: string | null;
        country: string | null;
        city: string | null;
        state: string | null;
        timezone: string | null;
        language: string | null;
        isEmailValid: boolean;
        emailValidationScore: number | null;
        emailValidationDetails: string | null;
        score: number;
        priority: number;
        scoringFactors: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        source: import(".prisma/client").$Enums.LeadSource;
        hubspotId: string | null;
        notes: string | null;
        metadata: string | null;
        enrichedAt: Date | null;
        validatedAt: Date | null;
        lastContactedAt: Date | null;
        userId: string;
    }>;
    update(id: string, leadData: Partial<Lead>): Promise<{
        id: string;
        firstName: string | null;
        lastName: string | null;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        fullName: string | null;
        phone: string | null;
        company: string | null;
        jobTitle: string | null;
        website: string | null;
        linkedinUrl: string | null;
        companySize: string | null;
        industry: string | null;
        location: string | null;
        country: string | null;
        city: string | null;
        state: string | null;
        timezone: string | null;
        language: string | null;
        isEmailValid: boolean;
        emailValidationScore: number | null;
        emailValidationDetails: string | null;
        score: number;
        priority: number;
        scoringFactors: string | null;
        status: import(".prisma/client").$Enums.LeadStatus;
        source: import(".prisma/client").$Enums.LeadSource;
        hubspotId: string | null;
        notes: string | null;
        metadata: string | null;
        enrichedAt: Date | null;
        validatedAt: Date | null;
        lastContactedAt: Date | null;
        userId: string;
    }>;
    delete(id: string): Promise<void>;
    bulkCreate(leads: any[]): Promise<{
        count: number;
    }>;
}
