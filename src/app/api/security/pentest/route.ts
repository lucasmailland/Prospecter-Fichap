import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from '@/lib/auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { isValidUrl, sanitizeInput, rateLimit } from '@/lib/security.middleware';

// Tipos para el pentest
interface PentestRequest {
  target: string;
  type: 'port-scan' | 'domain-info' | 'ssl-check' | 'dns-lookup';
  options?: {
    ports?: number[];
    timeout?: number;
  };
}

interface PentestResult {
  success: boolean;
  target: string;
  type: string;
  data?: any;
  error?: string;
  timestamp: string;
}

// Validar y sanitizar target
function validateTarget(target: string): { isValid: boolean; sanitized: string; error?: string } {
  if (!target || typeof target !== 'string') {
    return { isValid: false, sanitized: '', error: 'Target is required' };
  }

  // Sanitizar entrada
  const sanitized = sanitizeInput(target);
  
  // Validar que sea una URL válida o IP
  if (!isValidUrl(`https://${sanitized}`) && !isValidIP(sanitized)) {
    return { isValid: false, sanitized, error: 'Invalid target format' };
  }

  // Prevenir SSRF - rechazar IPs privadas y localhost
  if (isPrivateIP(sanitized) || isLocalhost(sanitized)) {
    return { isValid: false, sanitized, error: 'Private/localhost IPs not allowed' };
  }

  return { isValid: true, sanitized };
}

// Validar IP
function isValidIP(ip: string): boolean {
  const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
  return ipRegex.test(ip);
}

// Verificar si es IP privada
function isPrivateIP(ip: string): boolean {
  if (!isValidIP(ip)) return false;
  
  const parts = ip.split('.').map(Number);
  
  // RFC 1918 private ranges
  return (
    parts[0] === 10 ||
    (parts[0] === 172 && parts[1] >= 16 && parts[1] <= 31) ||
    (parts[0] === 192 && parts[1] === 168) ||
    parts[0] === 127 // localhost
  );
}

// Verificar si es localhost
function isLocalhost(target: string): boolean {
  const localhostPatterns = [
    'localhost',
    '127.0.0.1',
    '::1',
    '0.0.0.0'
  ];
  
  return localhostPatterns.some(pattern => 
    target.toLowerCase().includes(pattern)
  );
}

// Realizar pentest DNS lookup seguro
async function performDNSLookup(target: string): Promise<any> {
  try {
    // Simulación de DNS lookup (en producción usar librerías seguras)
    const dns = require('dns').promises;
    const result = await dns.lookup(target);
    return {
      address: result.address,
      family: result.family
    };
  } catch (error) {
    throw new Error(`DNS lookup failed: ${error.message}`);
  }
}

// Realizar verificación SSL
async function performSSLCheck(target: string): Promise<any> {
  try {
    const https = require('https');
    const url = new URL(`https://${target}`);
    
    return new Promise((resolve, reject) => {
      const req = https.request({
        hostname: url.hostname,
        port: 443,
        method: 'HEAD',
        timeout: 5000,
        rejectUnauthorized: false
      }, (res) => {
        const cert = res.socket.getPeerCertificate();
        resolve({
          valid: res.socket.authorized,
          issuer: cert.issuer,
          subject: cert.subject,
          validFrom: cert.valid_from,
          validTo: cert.valid_to
        });
      });
      
      req.on('error', reject);
      req.on('timeout', () => reject(new Error('Request timeout')));
      req.end();
    });
  } catch (error) {
    throw new Error(`SSL check failed: ${error.message}`);
  }
}

// Handler principal
export async function POST(request: NextRequest) {
  try {
    // Verificar autenticación
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Verificar permisos de admin
    if (session.user?.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    // Rate limiting específico para pentest
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    if (!rateLimit(`pentest-${clientIP}`, 5, 60000)) {
      return NextResponse.json(
        { error: 'Too many pentest requests' }, 
        { status: 429 }
      );
    }

    const body: PentestRequest = await request.json();
    const { target, type, options } = body;

    // Validar target
    const validation = validateTarget(target);
    if (!validation.isValid) {
      return NextResponse.json({
        success: false,
        error: validation.error
      }, { status: 400 });
    }

    const sanitizedTarget = validation.sanitized;
    const result: PentestResult = {
      success: false,
      target: sanitizedTarget,
      type,
      timestamp: new Date().toISOString()
    };

    // Ejecutar pentest según el tipo
    try {
      switch (type) {
        case 'dns-lookup':
          result.data = await performDNSLookup(sanitizedTarget);
          result.success = true;
          break;
          
        case 'ssl-check':
          result.data = await performSSLCheck(sanitizedTarget);
          result.success = true;
          break;
          
        case 'domain-info':
          result.data = {
            domain: sanitizedTarget,
            message: 'Domain info functionality restricted for security'
          };
          result.success = true;
          break;
          
        case 'port-scan':
          result.data = {
            message: 'Port scanning functionality restricted for security'
          };
          result.success = true;
          break;
          
        default:
          result.error = 'Invalid pentest type';
      }
    } catch (error) {
      result.error = error.message;
    }

    return NextResponse.json(result);
    
  } catch (error) {
// console.error('Pentest API error:', error);
    return NextResponse.json({
      success: false,
      error: 'Internal server error'
    }, { status: 500 });
  }
}

// GET para obtener información sobre pentests disponibles
export async function GET(request: NextRequest) {
  const session = await getServerSession(authOptions);
  
  if (!session || session.user?.role !== 'ADMIN') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  return NextResponse.json({
    availableTests: [
      {
        type: 'dns-lookup',
        description: 'Safe DNS lookup for public domains',
        restrictions: 'Public domains only'
      },
      {
        type: 'ssl-check',
        description: 'SSL certificate validation',
        restrictions: 'HTTPS endpoints only'
      },
      {
        type: 'domain-info',
        description: 'Basic domain information',
        restrictions: 'Limited for security'
      },
      {
        type: 'port-scan',
        description: 'Port scanning (restricted)',
        restrictions: 'Functionality disabled for security'
      }
    ],
    securityFeatures: [
      'SSRF protection enabled',
      'Private IP blocking',
      'Input sanitization',
      'Rate limiting',
      'Admin-only access'
    ]
  });
} 